// ======== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò –†–£–ß–ù–ê–Ø –°–ú–ï–ù–ê –¢–ï–ú–´ ========

const toggleBtn = document.getElementById('theme-toggle');
const themeEmoji = toggleBtn.querySelector('.theme-emoji');
const submitBtn = document.getElementById("submitFeedback");

function setTheme(mode, save = true) {
  if (mode === 'dark') {
    document.body.classList.add('dark');
    themeEmoji.textContent = 'üåô';
  } else {
    document.body.classList.remove('dark');
    themeEmoji.textContent = '‚òÄÔ∏è';
  }
  if (save) localStorage.setItem('theme', mode);
}

function autoTheme() {
  const hour = new Date().getHours();
  return (hour >= 19 || hour < 7) ? 'dark' : 'light';
}

window.addEventListener('DOMContentLoaded', () => {
  const saved = localStorage.getItem('theme');
  if (saved) setTheme(saved, false);
  else setTheme(autoTheme(), false);
});

toggleBtn.addEventListener('click', () => {
  const isDark = document.body.classList.contains('dark');
  setTheme(isDark ? 'light' : 'dark');
});

// ======== –î–í–ò–ñ–£–©–ò–ï–°–Ø –§–û–ù–´ ========

const shapes = document.querySelectorAll('.shape');
let screenWidth = window.innerWidth;
let screenHeight = window.innerHeight;

function initShapes() {
  shapes.forEach(shape => {
    const baseSize = Math.min(screenWidth, screenHeight) * 0.05;
    shape.pos = { x: Math.random() * screenWidth, y: Math.random() * screenHeight };
    shape.vel = { x: (Math.random() - 0.5) * 0.7, y: (Math.random() - 0.5) * 0.7 };
    shape.size = baseSize + Math.random() * baseSize;
    shape.targetSize = shape.size;
    shape.sizeChangeSpeed = 0.02 + Math.random() * 0.03;
    shape.style.width = shape.size + 'px';
    shape.style.height = shape.size + 'px';
  });
}

function repel(a, b) {
  const dx = (a.pos.x + a.size / 2) - (b.pos.x + b.size / 2);
  const dy = (a.pos.y + a.size / 2) - (b.pos.y + b.size / 2);
  const dist = Math.sqrt(dx * dx + dy * dy);
  const minDist = (a.size + b.size) / 2 + 10;
  if (dist < minDist) {
    const angle = Math.atan2(dy, dx);
    const push = (minDist - dist) * 0.03;
    a.vel.x += Math.cos(angle) * push;
    a.vel.y += Math.sin(angle) * push;
    b.vel.x -= Math.cos(angle) * push;
    b.vel.y -= Math.sin(angle) * push;
  }
}

function animate() {
  shapes.forEach((shape, i) => {
    shape.pos.x += shape.vel.x;
    shape.pos.y += shape.vel.y;

    if (shape.pos.x < 0) { shape.pos.x = 0; shape.vel.x = Math.abs(shape.vel.x); }
    if (shape.pos.x > screenWidth - shape.size) { shape.pos.x = screenWidth - shape.size; shape.vel.x = -Math.abs(shape.vel.x); }
    if (shape.pos.y < 0) { shape.pos.y = 0; shape.vel.y = Math.abs(shape.vel.y); }
    if (shape.pos.y > screenHeight - shape.size) { shape.pos.y = screenHeight - shape.size; shape.vel.y = -Math.abs(shape.vel.y); }

    for (let j = i + 1; j < shapes.length; j++) repel(shape, shapes[j]);

    shape.size += (shape.targetSize - shape.size) * shape.sizeChangeSpeed;
    if (Math.abs(shape.size - shape.targetSize) < 0.5) {
      const baseSize = Math.min(screenWidth, screenHeight) * 0.05;
      shape.targetSize = baseSize + Math.random() * baseSize;
      shape.sizeChangeSpeed = 0.01 + Math.random() * 0.04;
    }

    shape.style.transform = `translate(${shape.pos.x}px, ${shape.pos.y}px)`;
    shape.style.width = shape.size + 'px';
    shape.style.height = shape.size + 'px';
  });
  requestAnimationFrame(animate);
}

initShapes();
animate();

window.addEventListener('resize', () => {
  screenWidth = window.innerWidth;
  screenHeight = window.innerHeight;
  initShapes();
});

// ======== –ö–ù–û–ü–ö–ê –í–í–ï–†–• ========
const scrollTopBtn = document.getElementById('scrollTopBtn');

function toggleScrollBtn() {
  if (window.scrollY > 150) {
    scrollTopBtn.style.opacity = '1';
    scrollTopBtn.style.pointerEvents = 'auto';
  } else {
    scrollTopBtn.style.opacity = '0';
    scrollTopBtn.style.pointerEvents = 'none';
  }
}

// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
window.addEventListener('load', toggleScrollBtn);
window.addEventListener('scroll', toggleScrollBtn);

scrollTopBtn.addEventListener('click', () => 
  window.scrollTo({ top: 0, behavior: 'smooth' })
);

// ======== FAQ ========

const faqItems = document.querySelectorAll('.faq-item');
faqItems.forEach(item => item.addEventListener('click', () => item.classList.toggle('open')));

// ======== –ü–õ–ê–í–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø –ü–†–û–ö–†–£–¢–ö–ò ========
document.addEventListener("DOMContentLoaded", () => {
  const scrollElements = document.querySelectorAll(".scroll-animate");

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add("visible");
      } else {
        // —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω–æ –¥–∞–ª–µ–∫–æ –≤–Ω–µ –∑–æ–Ω—ã
        if (entry.boundingClientRect.top > window.innerHeight || entry.boundingClientRect.bottom < 0) {
          entry.target.classList.remove("visible");
        }
      }
    });
  }, { threshold: 0.25 });

  scrollElements.forEach(el => observer.observe(el));
});

document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".card").forEach(card => {
    const stars = card.querySelectorAll(".stars img");
    if (stars.length === 5) {
      card.classList.add("highlight");
    }
  });
});

window.addEventListener('load', () => {
  window.scrollTo({ top: 0, behavior: 'instant' });
});

// –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ script.js
window.scrollTo(0, 0); // —Å–±—Ä–æ—Å —Å–∫—Ä–æ–ª–ª–∞

// ======= –õ–û–ì–ò–ö–ê –¢–ï–°–¢–ê =======

const startBtn = document.querySelector('.start-test-btn');
const heroSection = document.querySelector('.hero');
const testContainer = document.getElementById('test-container');
const questionText = document.getElementById('question-text');
const optionsContainer = document.getElementById('options-container');
const nextBtn = document.getElementById('next-btn');
const prevBtn = document.getElementById('prev-btn');

const questions = [
  {
    question: "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è? (–í–æ–ø—Ä–æ—Å 1/30)",
    options: [
      "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥ –∏–ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º",
      "–í—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
      "–°–ø–æ—Ä—Ç –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö",
      "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è"
    ]
  },
  {
    question: "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã –≤–∞–º –±–ª–∏–∂–µ? (–í–æ–ø—Ä–æ—Å 2/30)",
    options: [
      "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
      "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
      "–†–∞–±–æ—Ç–∞ –≤ —É—Å–ª–æ–≤–∏—è—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏",
      "–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ª—é–¥—å–º–∏"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º? (–í–æ–ø—Ä–æ—Å 3/30)",
    options: [
      "–°—Ç–∞—Ä–∞—é—Å—å –∏–∑–±–µ–≥–∞—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π",
      "–ò—Å–ø–æ–ª—å–∑—É—é —Å–ø–æ—Ä—Ç –∏–ª–∏ —Ö–æ–±–±–∏",
      "–°—Ç—Ä–µ—Å—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –º–µ–Ω—è —Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ",
      "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Ä–µ—à–∞—é –ø—Ä–æ–±–ª–µ–º—É —Å–ø–æ–∫–æ–π–Ω–æ"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä—É—Ç–∏–Ω–µ? (–í–æ–ø—Ä–æ—Å 4/30)",
    options: [
      "–õ—é–±–ª—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ—Ä—è–¥–æ–∫",
      "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ",
      "–†—É—Ç–∏–Ω–∞ –±—ã—Å—Ç—Ä–æ —É—Ç–æ–º–ª—è–µ—Ç",
      "–ê–¥–∞–ø—Ç–∏—Ä—É—é—Å—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ"
    ]
  },
  {
    question: "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–µ–Ω –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç? (–í–æ–ø—Ä–æ—Å 5/30)",
    options: [
      "–û—á–µ–Ω—å –≤–∞–∂–µ–Ω",
      "–í–∞–∂–Ω–æ, –Ω–æ –Ω–µ –≥–ª–∞–≤–Ω–æ–µ",
      "–ù–µ –æ—Å–æ–±–æ –≤–∞–∂–Ω–æ",
      "–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–æ–æ–±—â–µ"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º? (–í–æ–ø—Ä–æ—Å 6/30)",
    options: [
      "–û–±–æ–∂–∞—é –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
      "–ò—Å–ø–æ–ª—å–∑—É—é, –Ω–æ –±–µ–∑ —Ñ–∞–Ω–∞—Ç–∏–∑–º–∞",
      "–ü–æ–ª—å–∑—É—é—Å—å —Ç–æ–ª—å–∫–æ –ò–ò",
      "–ù–µ –∏–º–µ—é –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º"
    ]
  },
  {
    question: "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ? (–í–æ–ø—Ä–æ—Å 7/30)",
    options: [
      "–í—ã—Å–æ–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞",
      "–ö–æ–º—Ñ–æ—Ä—Ç –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
      "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º",
      "–ü—Ä–µ—Å—Ç–∏–∂ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"
    ]
  },
  {
    question: "–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω? (–í–æ–ø—Ä–æ—Å 8/30)",
    options: [
      "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, –ª—é–±–ª—é —Ç–∏—à–∏–Ω—É",
      "–ò–Ω–æ–≥–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ",
      "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ, –ª—é–±–ª—é –æ–±—â–∞—Ç—å—Å—è",
      "–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –ª—é–¥—å–º–∏"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –ª–∏–¥–µ—Ä—Å—Ç–≤—É? (–í–æ–ø—Ä–æ—Å 9/30)",
    options: [
      "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –¥—Ä—É–≥–∏–º–∏",
      "–ú–æ–≥—É –±—ã—Ç—å –ª–∏–¥–µ—Ä–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
      "–õ—é–±–ª—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å",
      "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ –Ω–µ –¥–ª—è –º–µ–Ω—è"
    ]
  },
  {
    question: "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ? (–í–æ–ø—Ä–æ—Å 10/30)",
    options: [
      "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ",
      "–ö–æ–º–∞–Ω–¥–Ω—ã–µ —É—Å–ø–µ—Ö–∏",
      "–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º",
      "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è? (–í–æ–ø—Ä–æ—Å 11/30)",
    options: [
      "–î–æ–ª–≥–æ –æ–±–¥—É–º—ã–≤–∞—é",
      "–°–ª—É—à–∞—é –∏–Ω—Ç—É–∏—Ü–∏—é",
      "–°–ø—Ä–∞—à–∏–≤–∞—é –º–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö",
      "–†–µ—à–∞—é –±—ã—Å—Ç—Ä–æ"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä–∏—Å–∫—É? (–í–æ–ø—Ä–æ—Å 12/30)",
    options: [
      "–ò–∑–±–µ–≥–∞—é —Ä–∏—Å–∫–∞",
      "–ü—Ä–∏–µ–º–ª—é —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫",
      "–õ—é–±–ª—é —Ä–∏—Å–∫–æ–≤–∞—Ç—å",
      "–î–µ–π—Å—Ç–≤—É—é –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ"
    ]
  },
  {
    question: "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –≤–∞–º –±–ª–∏–∂–µ? (–í–æ–ø—Ä–æ—Å 13/30)",
    options: [
      "–û—Ñ–∏—Å, –≤—Å—ë —á—ë—Ç–∫–æ",
      "–£–¥–∞–ª—ë–Ω–∫–∞ –∏ —Å–≤–æ–±–æ–¥–∞",
      "–ì–∏–±—Ä–∏–¥ ‚Äî –±–∞–ª–∞–Ω—Å",
      "–ù–∞ –º–µ—Å—Ç–µ, –≥–¥–µ –¥–≤–∏–∂"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É? (–í–æ–ø—Ä–æ—Å 14/30)",
    options: [
      "–ü—Ä–∏–Ω–∏–º–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é",
      "–ò–Ω–æ–≥–¥–∞ –æ–±–∏–∂–∞—é—Å—å",
      "–ù–µ –æ–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏—è",
      "–°—Ç–∞—Ä–∞—é—Å—å –¥–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–µ"
    ]
  },
  {
    question: "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≥–ª–∞–≤–Ω–æ–µ –≤ –∫–æ–º–∞–Ω–¥–µ? (–í–æ–ø—Ä–æ—Å 15/30)",
    options: [
      "–î–æ–≤–µ—Ä–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
      "–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
      "–í–µ—Å—ë–ª–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
      "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –¥–µ–¥–ª–∞–π–Ω–∞–º? (–í–æ–ø—Ä–æ—Å 16/30)",
    options: [
      "–í—Å–µ–≥–¥–∞ —É–∫–ª–∞–¥—ã–≤–∞—é—Å—å –∑–∞—Ä–∞–Ω–µ–µ",
      "–ò–Ω–æ–≥–¥–∞ —Ç—è–Ω—É –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ",
      "–†–∞–±–æ—Ç–∞—é –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç",
      "–ù–µ–Ω–∞–≤–∏–∂—É —Å–ø–µ—à–∫—É"
    ]
  },
  {
    question: "–ß—Ç–æ –¥–ª—è –≤–∞—Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—Ö–∞? (–í–æ–ø—Ä–æ—Å 17/30)",
    options: [
      "–î–µ–Ω—å–≥–∏ –∏ —Å—Ç–∞—Ç—É—Å",
      "–°—á–∞—Å—Ç—å–µ –∏ —Å–≤–æ–±–æ–¥–∞",
      "–û–ø—ã—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
      "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —É—á–∏—Ç—å—Å—è? (–í–æ–ø—Ä–æ—Å 18/30)",
    options: [
      "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É",
      "–° –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º",
      "–ù–∞ –∫—É—Ä—Å–∞—Ö –∏ –ª–µ–∫—Ü–∏—è—Ö",
      "–° –ø–æ–º–æ—â—å—é –≤–∏–¥–µ–æ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤"
    ]
  },
  {
    question: "–ß—Ç–æ –≤—ã —Ü–µ–Ω–∏—Ç–µ –≤ —Ä–∞–±–æ—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? (–í–æ–ø—Ä–æ—Å 19/30)",
    options: [
      "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
      "–ö—Ä–µ–∞—Ç–∏–≤ –∏ —Å–≤–æ–±–æ–¥—É",
      "–ö–æ–º–∞–Ω–¥—É –∏ –æ–±—â–µ–Ω–∏–µ",
      "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏? (–í–æ–ø—Ä–æ—Å 20/30)",
    options: [
      "–° –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –∏ –∞–∑–∞—Ä—Ç–æ–º",
      "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Å–Ω–∞—á–∞–ª–∞ –¥—É–º–∞—é",
      "–ù–µ–º–Ω–æ–≥–æ —Ç—Ä–µ–≤–æ–∂–Ω–æ",
      "–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å, –µ—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ"
    ]
  },
  {
    question: "–ö–∞–∫–∞—è —Å—Ä–µ–¥–∞ –≤–∞–º –±–ª–∏–∂–µ? (–í–æ–ø—Ä–æ—Å 21/30)",
    options: [
      "–¢–∏—Ö–∏–π –æ—Ñ–∏—Å",
      "–®—É–º–Ω—ã–π open space",
      "–ö–∞—Ñ–µ –∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∏",
      "–î–æ–º –∏ –ø–æ–∫–æ–π"
    ]
  },
  {
    question: "–ß—Ç–æ –≤–∞–º –ø—Ä–æ—â–µ ‚Äî –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? (–í–æ–ø—Ä–æ—Å 22/30)",
    options: [
      "–ü—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é",
      "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω",
      "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å",
      "–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º? (–í–æ–ø—Ä–æ—Å 23/30)",
    options: [
      "–õ—é–±–ª—é –Ω–æ–≤–æ–µ",
      "–ü—Ä–∏–Ω–∏–º–∞—é –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ",
      "–° —Ç—Ä—É–¥–æ–º –ø—Ä–∏–≤—ã–∫–∞—é",
      "–ò–∑–±–µ–≥–∞—é –ø–µ—Ä–µ–º–µ–Ω"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —É—Å–ø–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞? (–í–æ–ø—Ä–æ—Å 24/30)",
    options: [
      "–ï—Å–ª–∏ –≤—Å–µ –¥–æ–≤–æ–ª—å–Ω—ã",
      "–ï—Å–ª–∏ –≤—Å—ë –ø–æ –ø–ª–∞–Ω—É",
      "–ï—Å–ª–∏ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
      "–ï—Å–ª–∏ –±—ã–ª —Ä–æ—Å—Ç –∏ –æ–ø—ã—Ç"
    ]
  },
  {
    question: "–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç? (–í–æ–ø—Ä–æ—Å 25/30)",
    options: [
      "–°–æ–∑–¥–∞–≤–∞—Ç—å",
      "–†—É–∫–æ–≤–æ–¥–∏—Ç—å",
      "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
      "–ü–æ–º–æ–≥–∞—Ç—å"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ? (–í–æ–ø—Ä–æ—Å 26/30)",
    options: [
      "–£—á—É—Å—å –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞",
      "–†–∞–∑–æ—á–∞—Ä–æ–≤—ã–≤–∞—é—Å—å, –Ω–æ –¥–≤–∏–≥–∞—é—Å—å –¥–∞–ª—å—à–µ",
      "–î–æ–ª–≥–æ –ø–µ—Ä–µ–∂–∏–≤–∞—é",
      "–ë—Ä–æ—Å–∞—é –∏ –∏–¥—É –¥–∞–ª—å—à–µ"
    ]
  },
  {
    question: "–ß—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º –±–æ–ª—å—à–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è? (–í–æ–ø—Ä–æ—Å 27/30)",
    options: [
      "–†–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏",
      "–û–±—â–∞—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º",
      "–°–æ–∑–¥–∞–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ",
      "–î–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å? (–í–æ–ø—Ä–æ—Å 28/30)",
    options: [
      "–ß—ë—Ç–∫–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
      "–ü–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é",
      "–ò–º–ø—Ä–æ–≤–∏–∑–∏—Ä—É—é",
      "–°—Ç–∞–≤–ª—é –º–∏–Ω–∏–º—É–º, –Ω–æ –≤—ã–ø–æ–ª–Ω—è—é —Ç–æ—á–Ω–æ"
    ]
  },
  {
    question: "–ö–∞–∫–∞—è —Ä–∞–±–æ—Ç–∞ –≤–∞—Å —Ç–æ—á–Ω–æ –Ω–µ —É—Å—Ç—Ä–æ–∏—Ç? (–í–æ–ø—Ä–æ—Å 29/30)",
    options: [
      "–°–∫—É—á–Ω–∞—è –∏ –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è",
      "–°–ª–∏—à–∫–æ–º —Å—Ç—Ä–µ—Å—Å–æ–≤–∞—è",
      "–ë–µ–∑ –æ–±—â–µ–Ω–∏—è",
      "–ë–µ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è"
    ]
  },
  {
    question: "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é? (–í–æ–ø—Ä–æ—Å 30/30)",
    options: [
      "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏ –≥–∏–±–∫–∞—è",
      "–° –≤—ã—Å–æ–∫–æ–π –æ–ø–ª–∞—Ç–æ–π",
      "–°–æ —Å–º—ã—Å–ª–æ–º –∏ –ø–æ–ª—å–∑–æ–π",
      "–° –ø—Ä–µ—Å—Ç–∏–∂–µ–º –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–æ–π"
    ]
  }
];

let currentQ = 0;
let answers = Array(questions.length).fill(null);

// –°–∫—Ä—ã—Ç–∏–µ –≥–µ—Ä–æ—è –∏ –ø–æ–∫–∞–∑ —Ç–µ—Å—Ç–∞
startBtn.addEventListener('click', () => {
  heroSection.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
  heroSection.style.opacity = '0';
  heroSection.style.transform = 'translateY(-40px)';
  setTimeout(() => {
    heroSection.style.display = 'none';
    showQuestion(currentQ);
    testContainer.style.display = 'flex';
    testContainer.classList.add('visible');
  }, 600);
});

// –ü–ª–∞–≤–Ω–∞—è —Å–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
function showQuestion(index, direction = 'forward') {
  // --- –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ---
  if (index >= questions.length) {
    showResults(); // –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å–º. –Ω–∏–∂–µ
    return;
  }

  const q = questions[index];

  // –ø–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  testContainer.classList.remove('fade-in');
  testContainer.classList.add('fade-out');

  setTimeout(() => {
    questionText.textContent = q.question;
    optionsContainer.innerHTML = '';

    q.options.forEach((opt, i) => {
      const btn = document.createElement('button');
      btn.classList.add('option-btn');
      if (answers[index] === i) btn.classList.add('selected');
      btn.textContent = opt;

      btn.addEventListener('click', () => {
        answers[index] = i;
        Array.from(optionsContainer.children).forEach(c => c.classList.remove('selected'));
        btn.classList.add('selected');
        nextBtn.disabled = false; // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º "–°–ª–µ–¥—É—é—â–∏–π"
      });

      optionsContainer.appendChild(btn);
    });

    // –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –∫–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π" –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    nextBtn.disabled = answers[index] === null;

    // === –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ø—Ä–æ—Å–∞ ===
    if (index === questions.length - 1) {
      nextBtn.textContent = "–ó–∞–∫–æ–Ω—á–∏—Ç—å ‚úÖ";
    } else {
      nextBtn.textContent = "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è";
    }

    // === –ü—Ä—è—á–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" ===
    const nav = document.querySelector('.test-nav');
    if (index === 0) {
      prevBtn.style.display = 'none';
      nav.classList.remove('double');
      nav.classList.add('single');
    } else {
      prevBtn.style.display = 'inline-flex';
      nav.classList.remove('single');
      nav.classList.add('double');
    }

    testContainer.classList.remove('fade-out');
    testContainer.classList.add('fade-in');
  }, 300);
}

let hasRated = false; // —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
// creative = —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è, analytic = –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è, practical = –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è
// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø—Ü–∏–π –¥–ª—è 30 –≤–æ–ø—Ä–æ—Å–æ–≤
const optionCategories = [
  // 1-10
  ["analytic","creative","practical","communicative"], // 1
  ["practical","creative","analytic","entrepreneurial"], // 2
  ["practical","technical","analytic","creative"],      // 3
  ["creative","communicative","practical","technical"], // 4
  ["analytic","creative","practical","entrepreneurial"],// 5
  ["creative","analytic","technical","practical"],      // 6
  ["analytic","creative","practical","technical"],      // 7
  ["practical","creative","communicative","entrepreneurial"], // 8
  ["practical","analytic","creative","technical"],      // 9
  ["creative","creative","practical","technical"],      // 10

  // 11-20
  ["creative","analytic","practical","entrepreneurial"], // 11
  ["practical","creative","analytic","technical"],       // 12
  ["analytic","creative","practical","technical"],       // 13
  ["creative","communicative","practical","technical"],  // 14
  ["analytic","practical","creative","technical"],       // 15
  ["practical","creative","technical","entrepreneurial"],// 16
  ["creative","analytic","practical","communicative"],   // 17
  ["practical","creative","analytic","entrepreneurial"], // 18
  ["analytic","practical","creative","technical"],       // 19
  ["creative","analytic","practical","communicative"],   // 20

  // 21-30
  ["practical","creative","analytic","technical"],       // 21
  ["creative","practical","analytic","entrepreneurial"], // 22
  ["analytic","creative","practical","technical"],       // 23
  ["creative","analytic","practical","entrepreneurial"], // 24
  ["practical","creative","analytic","technical"],       // 25
  ["creative","analytic","practical","communicative"],   // 26
  ["analytic","practical","creative","technical"],       // 27
  ["creative","practical","analytic","entrepreneurial"], // 28
  ["practical","creative","analytic","technical"],       // 29
  ["creative","analytic","practical","communicative"],   // 30
];

// ======== –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ========
function showResults() {
  const counts = { 
  creative: 0, 
  analytic: 0, 
  practical: 0,
  communicative: 0,
  technical: 0,
  entrepreneurial: 0
};

  answers.forEach((ans, i) => {
  const cat = optionCategories[i][ans] || "practical";
  counts[cat]++;
});

  const total = answers.length;
const percentages = {};
for (const key in counts) {
  percentages[key] = Math.round((counts[key] / total) * 100);
}

const bestMatchKey = Object.keys(percentages).reduce((a, b) =>
  percentages[a] >= percentages[b] ? a : b
);

const bestTexts = {
  creative: "—Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π (–¥–∏–∑–∞–π–Ω–µ—Ä, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä)",
  analytic: "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ñ–µ—Ä (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∏–Ω–∂–µ–Ω–µ—Ä, –∞–Ω–∞–ª–∏—Ç–∏–∫)",
  practical: "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å, –º–µ—Ö–∞–Ω–∏–∫, —Ç–µ—Ö–Ω–∏–∫)",
  communicative: "–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π (–º–µ–Ω–µ–¥–∂–µ—Ä, PR, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)",
  technical: "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ñ–µ—Ä (IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∏–Ω–∂–µ–Ω–µ—Ä-—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫)",
  entrepreneurial: "–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—Ç–∞–ø–µ—Ä, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –±–∏–∑–Ω–µ—Å–º–µ–Ω)"
};

const bestMatch = bestTexts[bestMatchKey];

  testContainer.innerHTML = `
    <div class="results-wrapper">
      <div class="results-panel">
        <div class="test-complete">üéì –¢–í–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢</div>
        <p class="result-text">–¢—ã –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—à—å –¥–ª—è <b>${bestMatch}</b> ‚Äî –∫—Ä—É—Ç–æ, —á—Ç–æ –ø—Ä–æ—à—ë–ª(–∞) —Ç–µ—Å—Ç!</p>
       <div class="progress-wrapper">
  <div class="progress-item">
    <span>–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Å—Ñ–µ—Ä–∞</span>
    <div class="progress-bar"><div class="fill" style="width: ${percentages.creative}%"></div></div>
    <span>${percentages.creative}%</span>
  </div>
  <div class="progress-item">
    <span>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å—Ñ–µ—Ä–∞</span>
    <div class="progress-bar"><div class="fill" style="width: ${percentages.analytic}%"></div></div>
    <span>${percentages.analytic}%</span>
  </div>
  <div class="progress-item">
    <span>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ñ–µ—Ä–∞</span>
    <div class="progress-bar"><div class="fill" style="width: ${percentages.practical}%"></div></div>
    <span>${percentages.practical}%</span>
  </div>
  <div class="progress-item">
    <span>–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–∞—è —Å—Ñ–µ—Ä–∞</span>
    <div class="progress-bar"><div class="fill" style="width: ${percentages.communicative}%"></div></div>
    <span>${percentages.communicative}%</span>
  </div>
  <div class="progress-item">
    <span>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ñ–µ—Ä–∞</span>
    <div class="progress-bar"><div class="fill" style="width: ${percentages.technical}%"></div></div>
    <span>${percentages.technical}%</span>
  </div>
  <div class="progress-item">
    <span>–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ñ–µ—Ä–∞</span>
    <div class="progress-bar"><div class="fill" style="width: ${percentages.entrepreneurial}%"></div></div>
    <span>${percentages.entrepreneurial}%</span>
  </div>
</div>

        <div class="results-actions">
          <button id="restartTestBtn" class="btn btn-restart">üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ</button>
          <button id="rateTestBtn" class="btn">‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç</button>
        </div>
      </div>

      <div class="rate-panel">
        <h3>–û—Ü–µ–Ω–∏ —Ç–µ—Å—Ç üåü</h3>

        <!-- –ò–º—è -->
        <input type="text" id="username" placeholder="–ò–º—è" maxlength="20">

        <!-- –í–æ–∑—Ä–∞—Å—Ç -->
        <input type="number" id="age" placeholder="–í–æ–∑—Ä–∞—Å—Ç" min="1" max="99" oninput="if(this.value.length>2)this.value=this.value.slice(0,2)">

        <!-- –ó–≤—ë–∑–¥—ã -->
        <div class="stars">
          <img src="/static/icon-star.png" class="star" data-value="1">
          <img src="/static/icon-star.png" class="star" data-value="2">
          <img src="/static/icon-star.png" class="star" data-value="3">
          <img src="/static/icon-star.png" class="star" data-value="4">
          <img src="/static/icon-star.png" class="star" data-value="5">
        </div>

        <!-- –û—Ç–∑—ã–≤ -->
        <textarea id="feedback" placeholder="–û—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)" maxlength="30"></textarea>

        <!-- –ö–Ω–æ–ø–∫–∞ -->
        <button id="submitFeedback" class="btn">üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</button>
      </div>
    </div>
  `;
  
  const ageSelect = document.getElementById('age');
  for (let i = 1; i <= 99; i++) {
    const option = document.createElement('option');
    option.value = i;
    option.textContent = i;
    ageSelect.appendChild(option);
  }


  const rateTestBtn = document.getElementById("rateTestBtn");
  const restartBtn = document.getElementById("restartTestBtn");
  const ratePanel = document.querySelector(".rate-panel");
  const resultsPanel = document.querySelector(".results-panel");
  const stars = document.querySelectorAll(".star");
  const submitBtn = document.getElementById("submitFeedback");

  const gap = 2;
  const panelWidth = 400;
  let rating = 0;

  // ===== –û—Ü–µ–Ω–∫–∞ —Ç–µ—Å—Ç–∞ =====
  rateTestBtn.onclick = () => {
    if (hasRated) {
      showNotification("–¢—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª(–∞) –æ—Ü–µ–Ω–∫—É –∑–∞ —ç—Ç–æ—Ç –ø—Ä–æ–≥–æ–Ω ‚≠ê", 3000);
      return;
    }
    ratePanel.style.opacity = "1";
    ratePanel.style.pointerEvents = "auto";

    const shift = panelWidth/1.4 + gap/1.4; 
    resultsPanel.style.transform = `translateX(-${shift}px)`;
    ratePanel.style.transform = `translateX(${shift}px)`;
  };

  // ===== –õ–æ–≥–∏–∫–∞ –∑–≤–µ–∑–¥ =====
  stars.forEach(star => {
    star.onclick = () => {
      rating = star.dataset.value;
      stars.forEach(s => s.classList.remove("active"));
      for (let i = 0; i < rating; i++) stars[i].classList.add("active");
    };
  });

  // ===== –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ =====
  submitBtn.onclick = () => {
  const name = document.getElementById("username").value.trim();
  const age = document.getElementById("age").value;
  const feedbackText = document.getElementById("feedback").value.trim();
  const rating = Array.from(document.querySelectorAll(".star.active")).length;

  if (!name || !age || rating === 0) {
    showNotification("–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏ –∑–≤—ë–∑–¥—ã ‚≠ê", 3000);
    return;
  }

  // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const data = {
    name: name,
    age: age,
    score: rating,
    feedback: feedbackText,
    answers: answers
  };

  fetch("/submit_feedback", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: localStorage.setItem('lastFeedback', JSON.stringify(data))
  })
    .then(res => res.json())
    .then(res => {
      if (res.status === "ok") {
        showNotification(`–°–ø–∞—Å–∏–±–æ, ${name}! –¢—ã –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ ‚≠ê`, 4000);
        hasRated = true;
        ratePanel.style.opacity = "0";
        ratePanel.style.pointerEvents = "none";
        resultsPanel.style.transform = "translateX(0)";
        // –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–∞—Ä—É—Å–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ
        addCarouselCard(localStorage.setItem('lastFeedback', JSON.stringify(data)));
      } else {
        showNotification(`–°–ø–∞—Å–∏–±–æ, ${name}! –¢—ã –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ ‚≠ê`, 4000);
      }
    })
    .catch(() => showNotification(`–°–ø–∞—Å–∏–±–æ, ${name}! –¢—ã –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ ‚≠ê`, 4000));
};

  // ===== –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ =====
restartBtn.onclick = () => {
  location.reload(); // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
};
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
nextBtn.addEventListener('click', () => {
  if (answers[currentQ] === null) return; // –Ω–µ–ª—å–∑—è –±–µ–∑ –≤—ã–±–æ—Ä–∞
  currentQ++;
  showQuestion(currentQ);
});

prevBtn.addEventListener('click', () => {
  if (currentQ > 0) {
    currentQ--;
    showQuestion(currentQ, 'backward');
  }
});

function showNotification(text, duration = 3000) {
  const notif = document.createElement("div");
  notif.className = "site-notification";
  notif.textContent = text;
  document.body.appendChild(notif);
  setTimeout(() => notif.classList.add("show"), 50);
  setTimeout(() => notif.classList.remove("show"), duration);
  setTimeout(() => notif.remove(), duration + 300);
}


const ageSelect = document.getElementById('age');
for (let i = 1; i <= 99; i++) {
  const option = document.createElement('option');
  option.value = i;
  option.textContent = i;
  // ageSelect.appendChild(option);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–∑—ã–≤—ã
function loadCarousel() {
  fetch("/get_results")
    .then(res => res.json())
    .then(data => {
      const track = document.getElementById("carousel-track");
      track.innerHTML = ""; // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      data.results.forEach(user => {
        const card = document.createElement("div");
        card.className = "carousel-card";
        card.innerHTML = `
          <h3>${user.name}, ${user.age}</h3>
          <p>–û—Ü–µ–Ω–∫–∞: ${user.score}‚≠ê</p>
          <p>–û—Ç–≤–µ—Ç—ã: ${user.answers.join(", ")}</p>
          <p>–û—Ç–∑—ã–≤: ${user.feedback || "-"}</p>
        `;
        track.appendChild(card);
      });
    });
}

// function addCarouselCard(user) {
//   const track = document.getElementById("carousel-track");
//   const card = document.createElement("div");
//   card.className = "carousel-card";
//   card.innerHTML = `
//     <h3>${user.name}, ${user.age} –ª–µ—Ç</h3>
//     <p>–û—Ü–µ–Ω–∫–∞: ${user.score}‚≠ê</p>
//     <p>–û—Ç–∑—ã–≤—ã: ${user.feedback}</p>
//     <p>–û—Ç–≤–µ—Ç—ã: ${user.answers.map((a,i)=>`–í${i+1}:${a}`).join(", ")}</p>
//   `;
//   track.appendChild(card);
// }

document.addEventListener("DOMContentLoaded", () => {
  const track = document.getElementById("carousel-track");
  if (!track) return;

  fetch("/get_results")
    .then(res => res.json())
    .then(data => {
      const results = data.results || [];
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${results.length} –∫–∞—Ä—Ç–æ—á–µ–∫:`);

      results.forEach(user => {
        console.log(`- ${user.name}, –æ—Ü–µ–Ω–∫–∞: ${user.score}`);
        const card = document.createElement("div");
        card.className = "card"; // –∫–ª–∞—Å—Å –∫–∞–∫ –≤ CSS

        // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ 5 –∑–≤–µ–∑–¥
        if (user.score == 5) card.classList.add("highlight");

        // —Å–æ–∑–¥–∞—ë–º –∑–≤–µ–∑–¥—ã
        let starsHtml = "";
        for (let i = 0; i < 5; i++) {
          starsHtml += `<img src="/static/icon-star.png" style="opacity:${i < user.score ? 1 : 0.3}">`;
        }

        card.innerHTML = `
          <div class="name">${user.name}</div>
          <div class="age">–í–æ–∑—Ä–∞—Å—Ç: ${user.age}</div>
          <div class="stars">${starsHtml}</div>
          <div class="comment">${user.feedback || ""}</div>
        `;
        track.appendChild(card);
      });
    })
    .catch(err => console.error(err));
});

// ======== –ë–ï–°–ö–û–ù–ï–ß–ù–ê–Ø –ü–õ–ê–í–ù–ê–Ø –ö–ê–†–£–°–ï–õ–¨ ========
function startInfiniteCarousel() {
  const track = document.getElementById("carousel-track");
  if (!track) return;

  const cards = Array.from(track.children);
  if (cards.length < 2) return;

  const gap = 24; // –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ (—Ç–æ—Ç –∂–µ, —á—Ç–æ –≤ CSS)
  const speed = 0.3; // —Å–∫–æ—Ä–æ—Å—Ç—å (—á–µ–º –≤—ã—à–µ ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ)
  let isPaused = false;

  // –î—É–±–ª–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ
  track.innerHTML += track.innerHTML;

  let offset = 0;

  function animate() {
    if (!isPaused) {
      offset -= speed;

      // –∫–æ–≥–¥–∞ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
      const firstCard = track.children[0];
      const cardWidth = firstCard.offsetWidth + gap;
      if (Math.abs(offset) >= cardWidth * cards.length) {
        offset = 0;
      }

      track.style.transform = `translateX(${offset}px)`;
    }

    requestAnimationFrame(animate);
  }

  // –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ ‚Äî –ø–∞—É–∑–∞
  track.addEventListener("mouseenter", () => (isPaused = true));
  track.addEventListener("mouseleave", () => (isPaused = false));

  requestAnimationFrame(animate);
}

document.addEventListener("DOMContentLoaded", () => {
  setTimeout(startInfiniteCarousel, 1000);
});

// ======== –≠–§–§–ï–ö–¢ –í–ó–†–´–í–ê –≠–ú–û–î–ó–ò –ü–†–ò –í–´–ë–û–†–ï –û–ü–¶–ò–ò ========
function createEmojiBurst(x, y) {
  const emojis = ["üåü", "üî•", "üí•", "‚ú®", "üéâ", "üòé", "üåà", "üí´", "‚ù§Ô∏è", "üöÄ"];
  const count = 7; // —Å–∫–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –≤—ã–ª–µ—Ç–∞–µ—Ç
  for (let i = 0; i < count; i++) {
    const emoji = document.createElement("span");
    emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
    emoji.className = "emoji-burst";
    emoji.style.position = "absolute"; // –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    emoji.style.left = `${x}px`;
    emoji.style.top = `${y}px`;
    emoji.style.fontSize = `${18 + Math.random() * 10}px`;
    emoji.style.transform = `translate(-50%, -50%) rotate(${Math.random() * 360}deg)`;
    document.body.appendChild(emoji);

    const dx = (Math.random() - 0.5) * 160; // —Ä–∞–∑–±—Ä–æ—Å
    const dy = (Math.random() - 1) * 160;
    const duration = 700 + Math.random() * 400;

    emoji.animate([
      { transform: `translate(0, 0) scale(1)`, opacity: 1 },
      { transform: `translate(${dx}px, ${dy}px) scale(0)`, opacity: 0 }
    ], {
      duration: duration,
      easing: "ease-out"
    });

    setTimeout(() => emoji.remove(), duration);
  }
}

// ======== –ü–†–ò –ö–õ–ò–ö–ï –ù–ê –í–ê–†–ò–ê–ù–¢ –í –¢–ï–°–¢–ï ========
document.addEventListener("click", e => {
  if (e.target.classList.contains("option-btn")) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const x = e.pageX;
    const y = e.pageY;
    createEmojiBurst(x, y);
  }
});
